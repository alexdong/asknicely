FORMAT: 1A
HOST: http://app.asknice.ly/api/v1

# AskNicely
Subscribe a person and or trigger a survey question to them.


## Person [/person/add]
Add or update a single person, or an array of people.

1. email is required and cannot be left. Name or firstname is desired. 
2. segment (optional, add a keyword about a person that will be displayed within Ask Nicely dashboards). 
3. Any field that does not match (segment, email, name, firstname, lastname) will be added as a custom field. Use this to store additional data about a person. 
4. triggeremail, true = send survey email now, false = store this person. 
5. "forcesubject" (optional). Create a one time subject for just this email. 

### Create a Person [POST]
+ Request (application/json)

    + Headers
    
            X-apikey: your_apikey
            X-domainkey: your_domainkey
            
    + Body
        
            [
                { "name": "John Smith", "email":"john@example.com", "dashboard":"recommend", "triggeremail":false, "segment":"pro","mycustom_id":102 }
            ]
      

+ Response 201 (application/json)

        {id:12, "success":true,"msg":"added", emailed:false}


## Person [/person/{id}/{key}]
Get a single person

+ Parameters
    + id (required,  `12`) ... Numeric `id` of the person we want to view.
    + key (optional, string,  `mycustom_id`) ... Instead of using the Ask Nicely key, specify your own custom feild.

### View a Person [GET]
+ Response 200 (application/json)
    
    + Headers
    
            X-apikey: your_apikey
            X-domainkey: your_domainkey

    + Body

            { "id": 12, "name": "John Smith", "email":"john@example.com" }



## Responses Collection [/respones/{pagesize}/{pagenumber}/{since_id}/{format}]

+ Parameters
    + pagesize (required, number,`50`) ... How many records to return per request, max 1000, default 50
    + pagenumber (required, number, `1`) ... Current page starting at 1, being the first page.
    + since_id (optional, number, `0`) ... Pass in the very last Ask Nicely Response id that you have downloaded (use 0 for everything). 
    + format (optional, string, `json`) ... Return all data back as json or use "csv" for a csv file (including headers). 

### List all Responses [GET]
+ Response 200 (application/json)

        {
            "success":true,
            "pagesize":50,
            "pagenumber":1,
            "total":500,
            "totalpages"10,
            "data":
            [{
              "id": 1, "title": "Jogging in park"
            }, {
              "id": 2, "title": "Pick-up posters from post-office"
            }]
        }






